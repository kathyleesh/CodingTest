'''
작성자 : 서현

작성일자 : 2022.02.28

작성내용 : N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 
(N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.
위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

todo :
1) N, M을 입력 받고 각 행의 값들을 입력받는다. 
2) 이동이 가능한 4가지 방향을 정의하고 큐 구현을 위해 deque 라이브러리를 사용한다.
3) 상하좌우를 확인해 미로 찾기 공간을 벗어나거나 이동할 수 없는 칸인 0인 부분을 배제할 수 있도록 한다.
4) 1인 부분을 하나씩 방문해 옮겨갈 때 마다 1씩 증가시켜 기록한다.

'''

from collections import deque                                # Queue 구현을 위해 deque 라이브러리 사용

def bfs(x,y): 
    queue = deque() 
    queue.append((x, y)) 

    while queue:
        x, y = queue.popleft()

        for i in range(4):                                  # 상하좌우를 확인
            nx = x + dx[i]
            ny = y + dy[i]

            if nx < 0 or nx >= N or ny < 0 or ny >= M:      # 미로 찾기 공간을 벗어난 부분을 배제
                continue

            if graph[nx][ny] == 0:                          # 이동할 수 없는 칸인 0인 부분을 배제
                continue

            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] + 1             # 1인 부분을 하나씩 방문해 옮겨갈 때 마다 1씩 증가시켜 기록
                queue.append((nx, ny))

    return graph[N - 1][M - 1]                              # 최단 거리의 값을 반환

N, M = map(int, input().split())                            # 두 정수 N, M(2 ≤ N, M ≤ 100)을 입력

graph = []
for i in range(N):
    graph.append(list(map(int, input())))                   # 각 행의 값들을 입력

dx = [-1, 1, 0, 0]                                          # 이동이 가능한 좌,우 방향을 정의
dy = [0, 0, -1, 1]                                          # 이동이 가능한 상,하 방향을 정의

print(bfs(0, 0))
